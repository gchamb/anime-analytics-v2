import Head from "next/head";
import React from "react";
import AnimeCover from "@/components/anime-cover";
import Image from "next/image";
import Jikan from "@/lib/jikan";
import Link from "next/link";
import redis from "@/server/redis";

import { GetStaticProps } from "next/types";
import { JikanPreview, JikanResponse } from "@/lib/jikan/types";
import { getCachedSections } from "@/server/caches";

const Home: React.FC<{
  airing: JikanPreview[];
  popular: JikanPreview[];
  upcoming: JikanPreview[];
}> = ({ airing, popular, upcoming }) => {
  return (
    <>
      <Head>
        <title>Anime Analytics</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="flex flex-col">
        <div className="flex justify-center pt-4">
          <Image
            className="rounded-full"
            src="/logo.png"
            alt="logo"
            width={100}
            height={100}
          />
        </div>

        <div className="grid grid-rows-3 gap-y-3 pb-5">
          <div className="w-11/12 m-auto flex flex-col gap-y-2 md:w-2/3">
            <h1 className="font-bold text-2xl text-center md:text-left">
              Airing Animes
            </h1>
            <div className="grid grid-cols-2 gap-2 bg-aa-1 p-5 rounded-md md:grid-cols-4 lg:grid-cols-6">
              {airing.map((anime, idx) => {
                return (
                  <Link key={idx} href={`/anime/${anime.mal_id}`}>
                    <AnimeCover image={anime.image} name={anime.title} />
                  </Link>
                );
              })}
            </div>
          </div>
          <div className="w-11/12 m-auto flex flex-col gap-y-2 md:w-2/3">
            <h1 className="font-bold text-2xl text-center md:text-left">
              Popular Animes
            </h1>
            <div className="grid grid-cols-2 gap-2 bg-aa-1 p-5 rounded-md md:grid-cols-4 lg:grid-cols-6">
              {popular.map((anime, idx) => {
                return (
                  <Link key={idx} href={`/anime/${anime.mal_id}`}>
                    <AnimeCover image={anime.image} name={anime.title} />
                  </Link>
                );
              })}
            </div>
          </div>
          <div className="w-11/12 m-auto flex flex-col gap-y-2 md:w-2/3">
            <h1 className="font-bold text-2xl text-center md:text-left">
              Upcoming Animes
            </h1>
            <div className="grid grid-cols-2 gap-2 bg-aa-1 p-5 rounded-md md:grid-cols-4 lg:grid-cols-6">
              {upcoming.map((anime, idx) => {
                return (
                  <Link key={idx} href={`/anime/${anime.mal_id}`}>
                    <AnimeCover image={anime.image} name={anime.title} />
                  </Link>
                );
              })}
            </div>
          </div>
        </div>
      </div>
    </>
  );
};

export default Home;

export const getStaticProps: GetStaticProps = async () => {
  let airingAnimes: JikanResponse;
  let popularAnimes: JikanResponse;
  let upcomingAnimes: JikanResponse;

  const sections = await getCachedSections();
  if (sections !== undefined) {
    airingAnimes = sections.airingAnimes;
    popularAnimes = sections.popularAnimes;
    upcomingAnimes = sections.upcomingAnimes;
    console.log("got cache");
  } else {
    const jikan = new Jikan();
    // show the top airing, top animes, and top upcoming animes
    const sections = await Promise.all([
      jikan.getTopAnimes("tv", "airing"),
      jikan.getTopAnimes("tv", "bypopularity"),
      jikan.getTopAnimes("tv", "upcoming"),
    ]);

    airingAnimes = sections[0];
    popularAnimes = sections[1];
    upcomingAnimes = sections[2];

    await redis.setEx(
      "sections-1",
      60 * 60 * 24,
      JSON.stringify({
        airingAnimes: sections[0],
        popularAnimes: sections[1],
        upcomingAnimes: sections[2],
      })
    );
    console.log("cache saved");
  }

  // limit the amount of data is being sent
  // only need the first 12 of each
  const airing: JikanPreview[] = airingAnimes.data
    .filter((anime, idx) => idx > 12)
    .map(({ title, mal_id, images }) => {
      return { title, mal_id, image: images.webp.image_url };
    });
  const popular: JikanPreview[] = popularAnimes.data
    .filter((anime, idx) => idx > 12)
    .map(({ title, mal_id, images }) => {
      return { title, mal_id, image: images.webp.image_url };
    });
  const upcoming: JikanPreview[] = upcomingAnimes.data
    .filter((anime, idx) => idx > 12)
    .map(({ title, mal_id, images }) => {
      return { title, mal_id, image: images.webp.image_url };
    });

  return {
    props: {
      airing,
      popular,
      upcoming,
    },
  };
};
